Key:
- is an item
##is a cancelled item
= is a done item

1.57079632679490, 1.47062890563334, 1.36943840600457, 1.26610367277950, 1.15927948072741

TODO:
================================================================================================
================================================================================================
= somehow get nice cluster size statistics from non-umbrella-sampled (slanted) cubes
	= done in v30

= do umbrella sampling
	= is v17 <- v25 <- v27 <- v28 <- v29 <- v31
	- doing on the cluster, see umbrellas_ran.ods

- crystal_coords_v18_for_v(17,21,v29).c: try to make without nested function
	- also rename + make it so we don't save while sampling, but call the save function when needed

= write latex on structure of the fluid (g(r), positional and orientational order param)
	- waiting for feedback
- write latex on monte carlo, classical nucleation theory, umbrella sampling

- somehow write transl_order and orient_order as the same function, because there is a lot of
	duplicate code in v10 <- v11 <- v14 <- v18 <- v20 <- v22.

- clean up the parse_commandline function
	- clean up the read/create functionality

##(part of do umbrella sampling)make nice fluids for pressures 6-9 (go as high as possible) and differing angles (see notes):
	##make v3 do: stop volume moves after reaching desired pf, i.e. make it do NVT
	= make v5 do: do one run and save inside a file at which snapshots/after how many
	  runs we find 0.4x (for x = 0, 1, ... , 9) and 0.50

- make readme of visualization tool, explain how h_slc_cl_read.c works?





DONE
================================================================================================
= do cluster analysis on slow crush (v13)
	##crush was too fast, increase BetaP by 1 or less each 10k steps, not 5 each 10k steps.
= do cluster analysis on fast crush (v16)
= make output_steps readable from commandline
	= done in v14
	= done in v13
	= done in v15
	= done in v16
	= done in v18
	= todo in v8
= make option in v14 (order) to not save the snapshots (to conserve space)
	= will be v18
= make histograms of order param data (#nearest neighbours, q4.q4, frac xtalline cubes, etc.)
	##doing in v11.
	= done in v14 by simulating v15
		##make separate file for each step
= make v14 (extra histograms) see paper
	= check
= make v15 (v1 + extra cmdline read + smart cubic start)
	= make smart start + check
##make this todo in markdown format
= make a simulation which does not crush, but slowly increases pressure
	= done in v13
= make orientational order parameter code (done in v9)
	= understand orientational order param code
	= test orient. o.p. in limits where it should be 0 (random) and 1 (perfect order)
		= done with v12 and v10
= check orientational order parameter axes as:
	= v9: normals of slanted cube
	##v10: normals of unslanted cube
	##v11: edges of slanted cube
	= v10: command line option for all of the above
= make output file name(s) readable from command line
	= done in v8
= make standalone positional, orientational order param code
	= only print cluster snapshot every ~1000 steps
	= make switch statements to enable doing both pos. and orient. at the same time.
	= DONE, is v9
= also show density in snapshot
= make g(r) (nice for thesis) to find density-dependent first-shell-radius
	= max -> 1st minimum
	= first shell ~ 2 * edge length

##make write_data2 to write data in the format for order_parameter
= make v4 do: v3 + snapshots for clustervisualization
	- Note: I will put the datafiles in the same datafolder, but call them clustcoord...poly
= make the clusters visible in normal visualization format, call this program visualize3
	= note: not visualize3, just visualize. Will alias this to show now.
= TODO: BetaP in crystal_v4.c has been hacked together. Fix this.
= make crystal_modified.c work
	= Segmentation fault (core dumped)
= make read_data2 to read from .poly files (i.e. to make it able to read the files it makes)
	= make the initial configuration file something to be entered on the command line
= check read_data2, is probably still bugged.
	= nope, i set packing fraction when reading but that should only happen when creating
= check if cell lists are fixed
	= YES
= read_data2 can be found in tests/test.c!
= generate initial configuration





Which versions are being used:
================================================================================================
================================================================================================
	Currently (2019-05-21) in use:
v30: v26, but samples order.txt
v31: v29, but samples order.txt correctly
v32: v16, but optimized + doesn't break detailed balance
v33: v22, but an extra argument: the first argument chooses the cutoff: 6 for 0.6, 7 for 0.7 etc.
    (make order param data + extra histograms + read_per implemented + save if (!output_per)
     histograms included: nbhist, Xnbhist, q4hist, q4avg per cube), but prints all cl sizes
     instead of making a histogram of the clustersizes.
v34: v30, but no order.txt (for densities for eq. of state)

	Currently (2019-05-10) in use:
v30: v26, but samples order.txt
v31: v29, but samples order.txt correctly
v32: v16, but optimized + doesn't break detailed balance
v33: v22, but an extra argument: the first argument chooses the cutoff: 6 for 0.6, 7 for 0.7 etc.
    (make order param data + extra histograms + read_per implemented + save if (!output_per)
     histograms included: nbhist, Xnbhist, q4hist, q4avg per cube), but prints all cl sizes
     instead of making a histogram of the clustersizes.
	Currently (2019-05-10) in use:
v26: v24, but doesn't break detailed balance
v29: v28, but no longer makes g.txt. Also give the order_cutoff on the commandline. Also now 
     samples clsz and order every 50 steps instead of 100. Also flushes clsz.txt, order.txt once 
     every 10k steps. (probably happens automatically much earlier due to small buffer)
v32: v16, but optimized + doesn't break detailed balance
v33: v22, but an extra argument: the first argument chooses the cutoff: 6 for 0.6, 7 for 0.7 etc.
    (make order param data + extra histograms + read_per implemented + save if (!output_per)
     histograms included: nbhist, Xnbhist, q4hist, q4avg per cube), but prints all cl sizes
     instead of making a histogram of the clustersizes.
	Currently (2019-04-24) in use:
v22: v20 (make order param data + extra histograms + read_per implemented + save if (!output_per)
     histograms included: nbhist, Xnbhist, q4hist, q4avg per cube), but prints all cl sizes
     instead of making a histogram of the clustersizes.
v26: v24, but doesn't break detailed balance
v29: v28, but no longer makes g.txt. Also give the order_cutoff on the commandline. Also now 
     samples clsz and order every 50 steps instead of 100. Also flushes clsz.txt, order.txt once 
     every 10k steps. (probably happens automatically much earlier due to small buffer)
	Currently (2019-04-18) in use:
v22: v20 (make order param data + extra histograms + read_per implemented + save if (!output_per)
     histograms included: nbhist, Xnbhist, q4hist, q4avg per cube), but prints all cl sizes
     instead of making a histogram of the clustersizes.
v26: v24, but doesn't break detailed balance
v28: v27, but also applies umbrella sampling to the equilibration steps
d2*: same as v2*, but only flushes clsz.txt once every 10k steps.
	Currently (2019-04-12) in use:
v22: v20 (make order param data + extra histograms + read_per implemented + save if (!output_per)
     histograms included: nbhist, Xnbhist, q4hist, q4avg per cube), but prints all cl sizes
     instead of making a histogram of the clustersizes.
v26: v24, but doesn't break detailed balance
v27: v25, but doesn't break detailed balance
c2*: same as v2*, but doesn't flush
d2*: same as v2*, but only flushes clsz.txt once every 10k steps.
	Currently (2019-03-27) in use:
v22: v20 (make order param data + extra histograms + read_per implemented + save if (!output_per)
     histograms included: nbhist, Xnbhist, q4hist, q4avg per cube), but prints all cl sizes
     instead of making a histogram of the clustersizes.
v24: v21 optimized (~25-33% faster)
v25: v23, but based on v24 (v17 (umbrella) based on v24).
	Currently (2019-03-15) in use:
v13: slowly increase pressure
v16: v6 (fast crush), but don't save cluster snapshots (v14/v18/v20 does this)
v21: v19, but with g(r) in datafoldername/g.txt
v22: v20 (make order param data + extra histograms + read_per implemented + save if (!output_per)
     histograms included: nbhist, Xnbhist, q4hist, q4avg per cube), but prints all cl sizes
     instead of making a histogram of the clustersizes.
v23: v17 (umbrella) based on v21.
	Currently (2019-03-15) in use:
v13: slowly increase pressure
v16: v6 (fast crush), but don't save cluster snapshots (v14/v18/v20 does this)
v17: umbrella sampling, based on v15. requires 11 arguments:
     usage: program.exe (r for read / c for create) (readfile / # cubes per dim)
     (output_folder / packing_fraction) mc_steps output_steps BetaP Phi order_mode
     target_cluster_size nvt/npt coupling_parameter
     order_mode: transl = 1, sl = 2, unsl = 3, edge = 4
v21: v19, but with g(r) in datafoldername/g.txt
v22: v20 (make order param data + extra histograms + read_per implemented + save if (!output_per)
     histograms included: nbhist, Xnbhist, q4hist, q4avg per cube), but prints all cl sizes
     instead of making a histogram of the clustersizes.
	Currently (2019-03-07) in use:
v7: g_of_r_maker, prints density next to 'count' in g%07d.txt every step too.
v13: slowly increase pressure
v16: v6 (fast crush), but don't save cluster snapshots (v14/v18/v20 does this)
v17: umbrella sampling, based on v15. requires 11 arguments:
     usage: program.exe (r for read / c for create) (readfile / # cubes per dim)
     (output_folder / packing_fraction) mc_steps output_steps BetaP Phi order_mode
     target_cluster_size nvt/npt coupling_parameter
     order_mode: transl = 1, sl = 2, unsl = 3, edge = 4
v19: v15, but can do NVT (if BetaP is given text rather than a number) and give output_folder
     instead of packing_fraction if we read from a file. Also makes density files again.
v20: make order param data + extra histograms + read_per implemented + save if (!output_per)
     histograms included: nbhist, Xnbhist, q4hist, q4avg per cube, clsizehist
	Currently (2019-03-05) in use:
v7: g_of_r_maker, prints density next to 'count' in g%07d.txt every step too.
v13: slowly increase pressure
v16: v6 (fast crush), but don't save cluster snapshots (v14/v18 does this)
v17: umbrella sampling, based on v15. requires 11 arguments:
     usage: program.exe (r for read / c for create) (readfile / # cubes per dim)
     (output_folder / packing_fraction) mc_steps output_steps BetaP Phi order_mode
     target_cluster_size nvt/npt coupling_parameter
     order_mode: transl = 1, sl = 2, unsl = 3, edge = 4
v18: make order param data + extra histograms + read_per implemented + save if (!output_per)
v19: v15, but can do NVT (if BetaP is given text rather than a number) and give output_folder
     instead of packing_fraction if we read from a file
	Currently (2019-02-28) in use:
v7: g_of_r_maker, prints density next to 'count' in g%07d.txt every step too.
v13: slowly increase pressure
v15: v1, but with output_steps read from cmdline, and try to resolve overlap by scaling to 
     optimal density (1 + 0.5 * cos(Phi))^(-3), and try to rotate cubes until no more overlap
v16: v6 (fast crush), but don't save cluster snapshots (v14/v18 does this)
v17: umbrella sampling, based on v15. requires 11 arguments:
     usage: program.exe (r for read / c for create) (readfile / # cubes per dim)
     (output_folder / packing_fraction) mc_steps output_steps BetaP Phi order_mode
     target_cluster_size nvt/npt coupling_parameter
     order_mode: transl = 1, sl = 2, unsl = 3, edge = 4
v18: make order param data + extra histograms + read_per implemented + save if (!output_per)
	Currently (2019-02-22) in use:
v8: simulate NVT, starting from a coord file
v13: slowly increase pressure
v15: v1, but with output_steps read from cmdline, and try to resolve overlap by scaling to 
     optimal density (1 + 0.5 * cos(Phi))^(-3), and try to rotate cubes until no more overlap
v16: v6 (fast crush), but don't save cluster snapshots (v14/v18 does this)
v18: make order param data + extra histograms + read_per implemented + save if (!output_per)

	Currently (2019-02-20) in use:
v8: simulate NVT, starting from a coord file
v13: slowly increase pressure
v14: make order param data + extra histograms + read_per implemented
v15: v1, but with output_steps read from cmdline, and try to resolve overlap by scaling to 
     optimal density (1 + 0.5 * cos(Phi))^(-3), and try to rotate cubes until no more overlap
v16: v6, but don't save clust snapshots (i.e. v4 but nice)

	Currently (2019-02-13) in use:
v8: simulate NVT, starting from a coord file
v13: slowly increase pressure
v14: make order param data + extra histograms + read_per implemented
v15: v1, but with output_steps read from cmdline, and try to resolve overlap by scaling to 
     optimal density (1 + 0.5 * cos(Phi))^(-3), and try to rotate cubes until no more overlap

	Currently (2019-02-11) in use:
v1: simulate normally
v8: simulate NVT, starting from a coord file
v11: make order param data + histograms 
v13: slowly increase pressure

	Currently (2019-01-30) in use:
v1: simulate normally
v8: simulate NVT, starting from a coord file
v9: read all coord files from a datafolder and give orient. or transl. order data
	note: orient with normals of slanted cube





Version explanation:
================================================================================================
================================================================================================
- v35 is just v34 but with g.txt
- v34 is just v30 but no order.txt (i.e. just bare simulation to get snapshots + density)
- v33 is just v22 but can choose order cutoff on commandline (as first argument)
- v32 is just v16 but based on v26 (so, with g.txt)
- v31 is just v29 but samples order.txt correctly, and only once every 100 steps
- v30 is just v29 but no umbrella steps (i.e. v26 but samples order.txt and clsz.txt (NOT redundant))
- v29 is just v28 but also samples everything that v22_coords_to_order.exe samples. 
  Also choose order_cutoff on the commandline, and no longer writes g.txt
- v28 is just v27 but also does umbrella steps during the equilibration
- d2* is just v2* but only flushes clsz.txt once every 10k steps.
- c2* is just v2* but doesn't flush
- v27 is just v25 but doesn't break detailed balance by nudging the deltas
- v26 is just v24 but doesn't break detailed balance by nudging the deltas
- v25 is just v23 but based on v24 (i.e. optimized). Also prints max cl sz to a file every 100 steps
- v24 is just v21 but optimized
- v23 is just v17 but based on v21 (it still does umbrella)
- v22 is just v20 but prints all clustersizes rather than making a hist.
- v21 is just v19 but with prints the g(r) to g.txt in the folder, superseding v19 and v7.
- v20 is just v18 but with a primitive cluster size histogram (program stops if clsz > 100 found)
- v19 is just v15 but can read output_folder, nvt in place of packing_fraction, betaP respectively
- v18 is just v14 but if output_steps == 0 we don't save the snapshots, 
- v17 is just v15 but with umbrella sampling
- v16 is just v6 but don't save the cluster steps yet (so a cleaner version of v3)
- v15 is just v1 but with output_steps read from cmdline + try to resolve overlap by scaling to 
  slightly under optimal density (1 + 0.5 * cos(Phi))^(-3), and try to rotate cubes until no more overlap.
##vtemp is temporary (duh) v1 but saves snapshot every 200 steps
- v14 is just v11 but with q4 dot neighbours averaged per cube hist and #nghbr Xtalline hist
- v13 is just v6 but don't immediately create the crystal order parameter, and slowly increases
	pressure, i.e. BetaP += 5 every 10k steps
- v12 is a quick test maker which reads a coordinate file and spits out the same coordinate file,
	but with (1) each cube in the standard orientation
		 (2) then rotate each cube about x, y, or z-axis a few times
		 (3) then rotate every cube around a random axis a few times
- v11 is v10 but which also makes #neighbours histogram and |q_4|^2 histogram
- v10 is v9 but with extra functionality: it can choose whether to use:
	slanted normals, unslanted normals, or edges of the slanted cube. (sl_norm/unsl_norm/edge)
- bond length 2 is waaaay too large for transl. o.p.
- v9 is read coordsstep (from e.g. v6) and make (p)osition or (o)rientation or (b)oth or (a)ll 
	clust coords (read from	cmd line every how many 100 steps to make an pos_coordsstep%07d.poly.)
	- v9 usage: program datafolder_name output_per p/o/b/a
		explanation: look for coords_step%07d in datafolder/datafolder_name until
		none more can be found. Output clust_pos_... or clust_orient_... every
		output_per files found. do pos. ordering for p, orient. ordering for o. or both (b) or all (a)
- v8 is read a coord file and continue an nvt or npt simulation.
	usage: nvt datafolder/<input> step_number mc_steps datafolder/<output>\n\
	usage2 (not implemented yet): program.exe npt BetaP datafolder/<input> step_number datafolder/<output>";
- v8 might detect overlap but that is due to precision errors when printing coordinate files,
	these have "only" six decimal places.
- v7 is just v5 but prints density next to 'count' in g%07d.txt every step too.
- v6 is just v4 but with the colors fixed (hopefully)
	= finally fixed
- v5 is g_of_r_maker, it simulates a new system and fprints the # of neighbours it counts
	and the histogram for each step
- v4 is v3 but uses crystal_v4.c to also save the clusters
- v3 is start low pf., do 10k steps, then set pressure to 10k. Record when density
	reachers 0.40, 0.41, ... , 0.50
- v2_read_crush.c will start at low density and crush it to the specified density, i.e.
  put pressure to 10000 until the desired density is reached, making a snapshot at that moment.





Notes:
================================================================================================
================================================================================================
Last meeting (2019-05-15):
Put the energy barrier pieces corresponding to different coupling parameters on top of eachother, 
they should overlap.
Density doesn't change much during umbrella sampling, so much so that it is effectively an NVT 
simulation which we wish to avoid (if a higher density crystal forms, but the total density 
stays constant, the rest of the system decreases in density, effectively decreasing the pressure).
A back of the envelope calculation gives us that in a system of 8000 particles, if we have a 
cluster of 400 particles (5% of the system) and maybe some crystallinity in the rest (say 7% in total) 
if the packing fraction in the liquid is 0.45 and in the crystal is 0.50, then the expected 
equilibrium packing fraction would be ~0.45317. So actually, it's not too bad.

Random stuff from paper notes (2019-05-15):
v29 <- v31 (umbr) is actually only suitable for reading files
v22 <- v33 transl_order doesn't normalize before taking dot prod, no problem, right?
v18_for_v21 is used in v25
v18_for_v27 is used in v27, v28
v18_for_v29 is used in v29, v30
v32 input: r/c rfile/(#C/dim) outfolder/pf steps out_steps pressure Phi
v29 <- v31 naming scheme: v29_20p6.xxa1.xx_txxx_xl0.0x
simulation speed (8k cubes): ~25k/hr, i.e. ~600k/day, i.e. ~42hr for 1 million.
the rotation symmetry group of the right rhombic prism is of order 4, and if we allow reflections, order 8.
How to umbrella:
- v32: Make fluids at various densities (start at low pf, e.g. 0.3 and let run for like 2m steps)
- v30: NpT at various pressures to equilibrate at the given pressures (for cubes, p = 6.17, ... , 6.20)
- v31: Umbrella sampling starting at target 30, lambda 0.005 and up the target by 20 until over barrier


(2019-05-14):
I found out that my umbrella sampling was actually not sampled well, I was also sampling the 
snapshots which I did not accept! Now the cluster size distributions don't contain lumps and 
the strong coupling parameter is no longer necessary (except at target size ~30)
Also made pieces of the barrier, even at target 360 the top of the barrier is not in sight, 
indicating that maybe we should use higher pressures.

Last few discussions (2019-05-01):
order cutoff of 0.5 is unfeasible. There is way too much noise from the fluid, as clusters 
with an order parameter of >0.5 are very common in the fluid close to the critical point.
order cutoff of 0.7 gives a much cleaner system, as there are not many clusters with an order 
parameter of >0.7 in the fluid. However, an order cutoff of 0.7 is very strict and needs more 
biasing (a higher lambda (coupling parameter/spring constant)) to keep the cluster around the 
target size. For small cluster sizes, the cluster won't form at all if we use lambda = 0.005.
Now we will run & analyze simulations for the following parameters:
slant angle: 90 deg (cube). (If there is time do other slant angles as well)
p = 6.17, 6.18, 6.19, 6.20.
lambda = 0.005, 0.01, 0.02, 0.04.
order cutoff = 0.6, 0.7.
target_cluster_size = 30, 50, 70, 90, 110, 130, 150, 170, 190, 210, 230, 250, 270, 300.

Last meeting (2019-04-11):
Clusters are ugly. What happens if we simulate at an order cutoff of 0.5, or 0.7?
Need more statistics. > 2 million steps is probably necessary.

Oops! I break detailed balance. Nudging the delta, deltaR and deltaV is only supposed to happen
in the equilibration phase. After that they should stay fixed, otherwise we can't do the same
steps back and forth ==> detailed balance is broken. Easy to fix though, done in v25 and v26.

------------------------------------------------------------------------------------------------
NOTE for umbrella sampling step 6 (target 150): accidentally gave wrong target value.
it's stopped halfway and started again.

------------------------------------------------------------------------------------------------
Last meeting:
From the results of the crushing simulation: start at density 0.49, let it run to equilibrate,
and to check that it doesn't crystallize already.
Then, from this equilibrated state, set pressure high and check when density is 0.492, 0.494,
etc. all the way to 0.51 if possible before the system crystallizes.
Umbrella sampling: there are two simulations to be ran:
	1) in the fluid, find the probability distr. of finding a cluster of size 1, 2, 3, ...
	2) when we have clusters of size say >10, there is one dominant cluster, and the maximum
	   cluster size will fluctuate around the target cluster size
------------------------------------------------------------------------------------------------
By the way, the official name of our slanted cube is a "right rhombic prism"
------------------------------------------------------------------------------------------------
- slant angles we wish to study: arccos[x] (for x = 0.0, 0.1, ... , 0.4), in radians:
	1.57079632679490, 1.47062890563334, 1.36943840600457, 1.26610367277950, 1.15927948072741
	in degrees:   90, 84.26,            78.46,            72.54,            66.42.
	(0.5, 60 degrees, 1.04719755119660 we will not do due to six-fold symmetry possibility)
------------------------------------------------------------------------------------------------
- OOPS, I don't need 16 programs running and letting them stop at different packing fractions!
	Because they start at the same time, their seed is the same, so each simulation is
	exactly the same! Just save the snapshot when we have reached a higher packing fraction.
	Implementing this idea in v3_read_crush.c
------------------------------------------------------------------------------------------------
Last meeting:
- make "nice fluids library" for densities 6-9 (go as high as possible)
	- do this by making a low density fluid, crushing as fast as possible until reaching
	  desired density and checking if the system has order at this point.
- work on communication
------------------------------------------------------------------------------------------------
Now the idea is to just use the crystal.c file, but use my own read_file method and convert
my positions "r[N]" into particle array called "p".
------------------------------------------------------------------------------------------------
Last runs:
- _6fix: apply per bd cond upon find
- _6test: exit upon find
	- no exits
- newcl: new (conventional) method of doing celllists + prints & apply per. bd. cnd.
	- no prints
------------------------------------------------------------------------------------------------
Last meeting:
= Instead of celllength >= diam + max_step_size, and update celllist after completed step,
	do celllength >= diam and update celllist after move, and again if move back.
= Pipe stdout to a log file rather than /dev/null
------------------------------------------------------------------------------------------------
Since overlap seems to occur right at the boundary of the box, maybe something funny is
	going on when saying x_new = (int) r_new.x / CellLength;. HOWEVER, sometimes, e.g. at
	pressure 1 for one particular simulation (TODO: which one), it happens everywhere.
	Nevertheless, the following tests will run for the weekend:

- sl10v2: increased MAXPC, probably not gonna do anything (PNGDA)
	- indeed, overlap still happens.

- sl10v3: increased MAXPC, pos_mod_f in update_cell_list(), PNGDA
	- exit status (5), Too many particles in one cell???

- dbg: increased MAXPC, pos_mod_f in update_cell_list(), exit(6) upon overshooting, PNGDA
	- exit status (5), Too many particles in one cell???

- dbg2: increased MAXPC, exit(6) upon overshooting, PNGDA
	- exit status (6), overshoot indeed happens!

- sl10d: increased MAXPC, increased precision of math4d.h (math5d.h, where float --> double)
	- (seemingly) no overlaps!





Questions:
================================================================================================
================================================================================================


------------------------------------------------------------------------------------------------
= 3 axes of cube well-defined (i.e. the normals/edges). What about 3 axes of slanted cube?
	should we go with the normals or edges?
	= to be decided
= Ask Frank:
	= What is typedef struct {double nz; double si; double co ;int n;}bndT;
		= a bond between two particles (i.e. they are close enough to each other,
		  where the position w.r.t eachother is given in polar coords, z-dist, sin and
		  cos of the angle around z-axis.
	= What is typedef struct {int n; bndT * bnd;}blistT;
		= a list of pointers to these bndTs, with the length of this list.
	= Is particlestocount == n_part always true?
		= yes
= Randomly orienting, is 12 rotations of \pm pi/2 around random axes aligned with box enough?
	= yes, probably, we will check this using the positional order parameter
